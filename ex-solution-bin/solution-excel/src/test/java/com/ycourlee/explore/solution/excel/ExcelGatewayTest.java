package com.ycourlee.explore.solution.excel;

import ch.qos.logback.core.encoder.ByteArrayUtil;
import cn.afterturn.easypoi.excel.entity.result.ExcelImportResult;
import com.sun.imageio.plugins.common.ReaderUtil;
import com.ycourlee.root.mocks.util.FileUtil;
import org.junit.jupiter.api.Test;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StreamUtils;

import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStream;
import java.util.Date;
import java.util.stream.Collectors;

/**
 * @author yongjiang
 * @date 2021.11.16
 */
public class ExcelGatewayTest extends AbstractEnvironment {

    static String encodedExcelStream = "";

    @Test
    void importExcelMoreTest() throws Exception {
        ExcelImportResult<Object> importResult =
                ExcelGateway.importExcelMore(recoveryFromEncodedString(encodedExcelStream),
                        ExcelRowModelTest.InputBO.class);
        importResult.getList().forEach(System.out::println);
    }

    @Test
    void exportExcelTest() throws Exception {
        FileOutputStream outputStream = new FileOutputStream(TEMP_DIR + "/b.xlsx");
        ExcelImportResult<Object> importResult =
                ExcelGateway.importExcelMore(recoveryFromEncodedString(encodedExcelStream),
                        ExcelRowModelTest.InputBO.class);

        ExcelGateway.exportExcel(outputStream
                , importResult.getList().stream().map(o -> {
                    ExcelRowModelTest.InputBO inputBO = (ExcelRowModelTest.InputBO) o;
                    ExcelRowModelTest.OutputBO outputBO = new ExcelRowModelTest.OutputBO();
                    outputBO.setDate(new Date());
                    outputBO.setId(inputBO.getId());
                    outputBO.setName(inputBO.getName());
                    return outputBO;
                }).collect(Collectors.toList())
                , ExcelRowModelTest.OutputBO.class);
    }
}
